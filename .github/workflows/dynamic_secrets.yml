name: Secrets
# Run this workflow every time a new commit pushed to your repository.
on: 
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
jobs:
  fetch_aws_dynamic_secrets:
          if: github.repository == 'akeylesstyree/akeyless-dba-workflow-tf'
          runs-on: ubuntu-latest
          name: Fetch AWS dynamic secrets
          #---------Required---------#
          permissions: # Must change the job token permissions to use JWT auth
            id-token: write
            contents: read
          #--------------------------#       
          steps:
          - name: Fetch dynamic secrets from AKeyless
            id: fetch-dynamic-secrets
            uses: LanceMcCarthy/akeyless-action@v3

            #uses: akeyless-github-action
            with:
              access-id: p-7dqco7hqskl6 # Looks like p-fq3afjjxv839
              #access-id: ${{vars.AKEYLESS_ACCESS_ID}} # Looks like p-fq3afjjxv839
              # we use a JSON string because Github actions don't support dictionaries as inputs
              # dynamic-secrets: |
              #   - name: "AWS/aws_admin_user"
              #     output-name: "aws_dynamic_secrets"
              #     access-type: jwt
              
              
              dynamic-secrets: '{"/AWS Test User":"aws_dynamic_secrets"}'
              # Geetting GCP credentials for terraform state backend 
              # static-secrets: |
              #   - name: "/GCP/gcp-tf-credentials"
              #     output-name: "GOOGLE_CREDENTIALS"
              # static-secrets: '{"/GCP/gcp-tf-credentials":"GOOGLE_CREDENTIALS"}'

              

          
              export-secrets-to-outputs: true
              export-secrets-to-environment: true
      # **** KEY TAKEAWAY - EXPORT DYNAMIC SECRET's KEYS TO ENV VARS *****
          - name: Export Secrets to Environment
            run: |
             echo '${{ steps.fetch-dynamic-secrets.outputs.aws_dynamic_secrets }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV      
       #   - name: Google Credentials from Akeyless
       #     run: echo "${{ env.GOOGLE_CREDENTIALS }}"

      # You can now access each secret separately as environment variables
          - name: Verify Vars
            run: |
              echo "access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}"
              echo "id: ${{ env.AWS_id }}"
              echo "secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY}}"
              echo "security_token: ${{ env.AWS_security_token }}"
              echo "ttl_in_minutes: ${{ env.AWS_ttl_in_minutes }}"
              echo "type: ${{ env.AWS_type }}"
              echo "user: ${{ env.AWS_user }}"

              export AWS_ACCESS_KEY_ID="${{ env.AWS_access_key_id }}"
              export AWS_SECRET_ACCESS_KEY="${{ env.AWS_secret_access_key }}"


          - name: Checkout Repo
            uses: actions/checkout@v3
            
          - name: Terraform fmt
            id: fmt
            run: terraform fmt -check
            continue-on-error: true

          - name: Terraform Init
            uses: hashicorp/setup-terraform@v2
            id: init
          - run: terraform init
          - run: echo ${{ steps.init.outputs.stdout }}
          - run: echo ${{ steps.init.outputs.stderr }}
          - run: echo ${{ steps.init.outputs.exitcode }}

         ######
         ###### Terraform Validate Starts ########   
         ######
          - name: Terraform Validate
            id: validate
            run: terraform validate -no-color

         ######
         ###### Terraform Plan Starts ########   
         ######
          - name: Terraform Plan
            run: |
              terraform plan -no-color
              echo "access_key_id: ${{ env.AWS_access_key_id }}"
              echo "id: ${{ env.AWS_id }}"
              echo "secret_access_key: ${{ env.AWS_secret_access_key }}"

            id: plan
          - uses: hashicorp/setup-terraform@v2
            continue-on-error: true

          
          - uses: actions/github-script@v6
            if: github.event_name == 'pull_request'
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              ## This creates the output of the plan so you can see the terraform pre plan estimate ##
              script: |
                  // 1. Retrieve existing bot comments for the PR
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  })
                  const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                  })

                  // 2. Prepare format of the comment
                  const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
                  #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  // 3. If we have a comment, update it, otherwise create a new one
                  if (botComment) {
                    github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: botComment.id,
                      body: output
                    })
                  } else {
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                    })
                  }
          ######
          ###### Terraform Apply Starts ########
          ######
          - name: Terraform Apply
            run: |
              terraform apply -no-color -auto-approve
              echo "access_key_id: ${{ env.AWS_access_key_id }}"
              echo "id: ${{ env.AWS_id }}"
              echo "secret_access_key: ${{ env.AWS_secret_access_key }}"

            id: apply
          - uses: hashicorp/setup-terraform@v2
            continue-on-error: true

          - uses: actions/github-script@v6
            if: github.event_name == 'pull_request'
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              # This creates the output of the plan so you can see the terraform pre plan estimate #

              script: |
                  // 1. Retrieve existing bot comments for the PR
                  const { data: comments } = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                  })
                  const botComment = comments.find(comment => {
                    return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
                  })

                  // 2. Prepare format of the comment
                  const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
                  #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
                  <details><summary>Validation Output</summary>

                  \`\`\`\n
                  ${{ steps.validate.outputs.stdout }}
                  \`\`\`

                  </details>

                  #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  // 3. If we have a comment, update it, otherwise create a new one
                  if (botComment) {
                    github.rest.issues.updateComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: botComment.id,
                      body: output
                    })
                  } else {
                    github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: output
                    })
                  }

    
